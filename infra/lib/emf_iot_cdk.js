"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.EMFIoTCdkStack = void 0;
const cdk = require("@aws-cdk/core");
const aws_iot_1 = require("@aws-cdk/aws-iot");
const aws_iam = require("@aws-cdk/aws-iam");
const aws_logs_1 = require("@aws-cdk/aws-logs");
const aws_logs_2 = require("@aws-cdk/aws-logs");
const CLIENT_ID = 'MyApp123';
const METRICS_PUB_TOPIC = `$aws/rules/emf/${CLIENT_ID}/logs`;
const METRICS_RULE_TOPIC = `$aws/rules/emf/+/logs`;
const LOG_GROUP_NAME = `${CLIENT_ID}_EMF_Logs`;
class EMFIoTCdkStack extends cdk.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        new aws_iot_1.CfnPolicy(this, 'IoTPolicy', {
            policyName: 'MyApp123IoTPolicy',
            policyDocument: {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iot:Connect"
                        ],
                        "Resource": [
                            `arn:aws:iot:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:client/\${iot:ClientId}`
                        ]
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "iot:Publish"
                        ],
                        "Resource": [
                            `arn:aws:iot:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:topic/${METRICS_PUB_TOPIC}`
                        ]
                    }
                ]
            }
        });
        new aws_logs_1.LogGroup(this, 'LogGroup', {
            logGroupName: LOG_GROUP_NAME,
            retention: aws_logs_2.RetentionDays.ONE_MONTH
        });
        const CWRole = new aws_iam.Role(this, 'CWEMFRole', {
            assumedBy: new aws_iam.ServicePrincipal('iot.amazonaws.com'),
            inlinePolicies: {
                'cw-emf-policy': new aws_iam.PolicyDocument({
                    statements: [
                        new aws_iam.PolicyStatement({
                            actions: [
                                'logs:CreateLogGroup',
                                'logs:CreateLogStream',
                                'logs:PutLogEvents'
                            ],
                            resources: [
                                `arn:aws:logs:${cdk.Aws.REGION}:${cdk.Aws.ACCOUNT_ID}:log-group:${LOG_GROUP_NAME}:*`
                            ]
                        })
                    ]
                })
            }
        });
        new aws_iot_1.CfnTopicRule(this, 'BasicIngestEMFIoTRule', {
            ruleName: 'emf',
            topicRulePayload: {
                actions: [
                    {
                        cloudwatchLogs: {
                            logGroupName: LOG_GROUP_NAME,
                            roleArn: CWRole.roleArn,
                            batchMode: true,
                        }
                    }
                ],
                description: 'IoT Rule',
                sql: `SELECT VALUE *.batch
                      FROM '${METRICS_RULE_TOPIC}'`,
                ruleDisabled: false,
                awsIotSqlVersion: '2016-03-23'
            }
        });
    }
}
exports.EMFIoTCdkStack = EMFIoTCdkStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW1mX2lvdF9jZGsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJlbWZfaW90X2Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUM7QUFFckMsOENBQXlEO0FBQ3pELDRDQUE0QztBQUM1QyxnREFBNEM7QUFDNUMsZ0RBQWdEO0FBRWhELE1BQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUM3QixNQUFNLGlCQUFpQixHQUFHLGtCQUFrQixTQUFTLE9BQU8sQ0FBQztBQUM3RCxNQUFNLGtCQUFrQixHQUFHLHVCQUF1QixDQUFDO0FBQ25ELE1BQU0sY0FBYyxHQUFHLEdBQUcsU0FBUyxXQUFXLENBQUM7QUFFL0MsTUFBYSxjQUFlLFNBQVEsR0FBRyxDQUFDLEtBQUs7SUFDekMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFzQjtRQUM1RCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUN4QixJQUFJLG1CQUFTLENBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRTtZQUM3QixVQUFVLEVBQUUsbUJBQW1CO1lBQy9CLGNBQWMsRUFBRTtnQkFDWixTQUFTLEVBQUUsWUFBWTtnQkFDdkIsV0FBVyxFQUFFO29CQUNUO3dCQUNJLFFBQVEsRUFBRSxPQUFPO3dCQUNqQixRQUFRLEVBQUU7NEJBQ04sYUFBYTt5QkFDaEI7d0JBQ0QsVUFBVSxFQUFFOzRCQUNSLGVBQWUsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxVQUFVLDBCQUEwQjt5QkFDaEY7cUJBQ0o7b0JBQ0Q7d0JBQ0ksUUFBUSxFQUFFLE9BQU87d0JBQ2pCLFFBQVEsRUFBRTs0QkFDTixhQUFhO3lCQUNoQjt3QkFDRCxVQUFVLEVBQUU7NEJBQ1IsZUFBZSxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsVUFBVSxpQkFBaUIsRUFBRTt5QkFDbkY7cUJBQ0o7aUJBQ0o7YUFDSjtTQUNKLENBQUMsQ0FBQztRQUNILElBQUksbUJBQVEsQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzNCLFlBQVksRUFBRSxjQUFjO1lBQzVCLFNBQVMsRUFBRSx3QkFBYSxDQUFDLFNBQVM7U0FDckMsQ0FBQyxDQUFDO1FBQ0gsTUFBTSxNQUFNLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUU7WUFDL0MsU0FBUyxFQUFFLElBQUksT0FBTyxDQUFDLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO1lBQzVELGNBQWMsRUFBRTtnQkFDWixlQUFlLEVBQUUsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDO29CQUN4QyxVQUFVLEVBQUU7d0JBQ1IsSUFBSSxPQUFPLENBQUMsZUFBZSxDQUFDOzRCQUN4QixPQUFPLEVBQUU7Z0NBQ0wscUJBQXFCO2dDQUNyQixzQkFBc0I7Z0NBQ3RCLG1CQUFtQjs2QkFDdEI7NEJBQ0QsU0FBUyxFQUFFO2dDQUNQLGdCQUFnQixHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsY0FBYyxjQUFjLElBQUk7NkJBQ3ZGO3lCQUNKLENBQUM7cUJBQ0w7aUJBQ0osQ0FBQzthQUNMO1NBQ0osQ0FBQyxDQUFDO1FBQ0gsSUFBSSxzQkFBWSxDQUFDLElBQUksRUFBRSx1QkFBdUIsRUFBRTtZQUM1QyxRQUFRLEVBQUUsS0FBSztZQUNmLGdCQUFnQixFQUFFO2dCQUNkLE9BQU8sRUFBRTtvQkFDTDt3QkFDSSxjQUFjLEVBQUU7NEJBQ1osWUFBWSxFQUFFLGNBQWM7NEJBQzVCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTzs0QkFDdkIsU0FBUyxFQUFFLElBQUk7eUJBQ2xCO3FCQUNKO2lCQUNKO2dCQUNELFdBQVcsRUFBRSxVQUFVO2dCQUN2QixHQUFHLEVBQUU7OEJBQ1Msa0JBQWtCLEdBQUc7Z0JBQ25DLFlBQVksRUFBRSxLQUFLO2dCQUNuQixnQkFBZ0IsRUFBRSxZQUFZO2FBQ2pDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKO0FBeEVELHdDQXdFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7Q29uc3RydWN0fSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7Q2ZuUG9saWN5LCBDZm5Ub3BpY1J1bGV9IGZyb20gXCJAYXdzLWNkay9hd3MtaW90XCI7XG5pbXBvcnQgKiBhcyBhd3NfaWFtIGZyb20gXCJAYXdzLWNkay9hd3MtaWFtXCI7XG5pbXBvcnQge0xvZ0dyb3VwIH0gZnJvbSBcIkBhd3MtY2RrL2F3cy1sb2dzXCI7XG5pbXBvcnQge1JldGVudGlvbkRheXN9IGZyb20gXCJAYXdzLWNkay9hd3MtbG9nc1wiO1xuXG5jb25zdCBDTElFTlRfSUQgPSAnTXlBcHAxMjMnO1xuY29uc3QgTUVUUklDU19QVUJfVE9QSUMgPSBgJGF3cy9ydWxlcy9lbWYvJHtDTElFTlRfSUR9L2xvZ3NgO1xuY29uc3QgTUVUUklDU19SVUxFX1RPUElDID0gYCRhd3MvcnVsZXMvZW1mLysvbG9nc2A7XG5jb25zdCBMT0dfR1JPVVBfTkFNRSA9IGAke0NMSUVOVF9JRH1fRU1GX0xvZ3NgO1xuXG5leHBvcnQgY2xhc3MgRU1GSW9UQ2RrU3RhY2sgZXh0ZW5kcyBjZGsuU3RhY2sge1xuICAgIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogY2RrLlN0YWNrUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkLCBwcm9wcyk7XG4gICAgICAgIG5ldyBDZm5Qb2xpY3kodGhpcywgJ0lvVFBvbGljeScsIHtcbiAgICAgICAgICAgIHBvbGljeU5hbWU6ICdNeUFwcDEyM0lvVFBvbGljeScsXG4gICAgICAgICAgICBwb2xpY3lEb2N1bWVudDoge1xuICAgICAgICAgICAgICAgIFwiVmVyc2lvblwiOiBcIjIwMTItMTAtMTdcIixcbiAgICAgICAgICAgICAgICBcIlN0YXRlbWVudFwiOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRWZmZWN0XCI6IFwiQWxsb3dcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQWN0aW9uXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlvdDpDb25uZWN0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlJlc291cmNlXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgYXJuOmF3czppb3Q6JHtjZGsuQXdzLlJFR0lPTn06JHtjZGsuQXdzLkFDQ09VTlRfSUR9OmNsaWVudC9cXCR7aW90OkNsaWVudElkfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJFZmZlY3RcIjogXCJBbGxvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJBY3Rpb25cIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiaW90OlB1Ymxpc2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiUmVzb3VyY2VcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBhcm46YXdzOmlvdDoke2Nkay5Bd3MuUkVHSU9OfToke2Nkay5Bd3MuQUNDT1VOVF9JRH06dG9waWMvJHtNRVRSSUNTX1BVQl9UT1BJQ31gXG4gICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBuZXcgTG9nR3JvdXAodGhpcywgJ0xvZ0dyb3VwJywge1xuICAgICAgICAgICAgbG9nR3JvdXBOYW1lOiBMT0dfR1JPVVBfTkFNRSxcbiAgICAgICAgICAgIHJldGVudGlvbjogUmV0ZW50aW9uRGF5cy5PTkVfTU9OVEhcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IENXUm9sZSA9IG5ldyBhd3NfaWFtLlJvbGUodGhpcywgJ0NXRU1GUm9sZScsIHtcbiAgICAgICAgICAgIGFzc3VtZWRCeTogbmV3IGF3c19pYW0uU2VydmljZVByaW5jaXBhbCgnaW90LmFtYXpvbmF3cy5jb20nKSxcbiAgICAgICAgICAgIGlubGluZVBvbGljaWVzOiB7XG4gICAgICAgICAgICAgICAgJ2N3LWVtZi1wb2xpY3knOiBuZXcgYXdzX2lhbS5Qb2xpY3lEb2N1bWVudCh7XG4gICAgICAgICAgICAgICAgICAgIHN0YXRlbWVudHM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBhd3NfaWFtLlBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnbG9nczpDcmVhdGVMb2dHcm91cCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsb2dzOkNyZWF0ZUxvZ1N0cmVhbScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdsb2dzOlB1dExvZ0V2ZW50cydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlczogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgYXJuOmF3czpsb2dzOiR7Y2RrLkF3cy5SRUdJT059OiR7Y2RrLkF3cy5BQ0NPVU5UX0lEfTpsb2ctZ3JvdXA6JHtMT0dfR1JPVVBfTkFNRX06KmBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIG5ldyBDZm5Ub3BpY1J1bGUodGhpcywgJ0Jhc2ljSW5nZXN0RU1GSW9UUnVsZScsIHtcbiAgICAgICAgICAgIHJ1bGVOYW1lOiAnZW1mJyxcbiAgICAgICAgICAgIHRvcGljUnVsZVBheWxvYWQ6IHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zOiBbXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsb3Vkd2F0Y2hMb2dzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nR3JvdXBOYW1lOiBMT0dfR1JPVVBfTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlQXJuOiBDV1JvbGUucm9sZUFybixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXRjaE1vZGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSW9UIFJ1bGUnLFxuICAgICAgICAgICAgICAgIHNxbDogYFNFTEVDVCBWQUxVRSAqLmJhdGNoXG4gICAgICAgICAgICAgICAgICAgICAgRlJPTSAnJHtNRVRSSUNTX1JVTEVfVE9QSUN9J2AsXG4gICAgICAgICAgICAgICAgcnVsZURpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBhd3NJb3RTcWxWZXJzaW9uOiAnMjAxNi0wMy0yMydcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19